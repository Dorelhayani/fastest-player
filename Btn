#define RedBTN D1
#define Dbounce 50
unsigned long LastPressTime; 
unsigned long PressDuration;
unsigned long PressStartTime;
int LastVal;
int val;

void BTN_setup() {
PressDuration = 0;
Serial.begin(9600);
pinMode(RedBTN, INPUT_PULLUP);
LastPressTime = millis();
LastVal = digitalRead(RedBTN);
wifiClient_Setup();
}

void BTN_loop() {
  BtnPrssed();
// wifi_loop();

}

// Button Press Function 
// ---------------------------------------------------------------------------------
void  BtnPrssed(){
val = digitalRead(RedBTN);

if( (val == LOW) && (LastVal == HIGH) && (millis() - LastPressTime > Dbounce ) ){
Light(0x40E0D0);
LastPressTime = millis();
PressStartTime = millis();
PressDuration = 0;
Serial.println("Button Pressed"); }
else Light(0x000000); 

BtnPrssed_Time();
LastVal = val;
}
// ---------------------------------------------------------------------------------


// Button Press Time Function 
// ---------------------------------------------------------------------------------
void BtnPrssed_Time() {
 val = digitalRead(RedBTN);
if ((val == HIGH) && (LastVal == LOW) && (millis() - LastPressTime > Dbounce) ) {
LastPressTime = millis();
PressDuration = millis() - PressStartTime;
float PressDurationSeconds = PressDuration / 1000.0; 
float PressDurMill = PressDurationSeconds * 1000.0;

PressArr[idx] = PressDurationSeconds;

if (idx > 0) { improvements[idx] = PressArr[idx] - PressArr[idx - 1]; }
idx = (idx + 1); 

Serial.print("Button Press Duration: ");
Serial.print(PressDurationSeconds);
Serial.println(" seconds");

Serial.print("Button Press Duration in milliseconds: ");
Serial.print(PressDurMill); 
Serial.println(" ms");
SendData(PressDurMill);

  }
}
// ---------------------------------------------------------------------------------
